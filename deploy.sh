#!/bin/bash

# H.E.A.R.T Trading Academy - Deploy Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ Starting H.E.A.R.T Trading Academy deployment..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
check_requirements() {
    log "Checking requirements..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    info "‚úÖ All requirements satisfied"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
setup_directories() {
    log "Setting up directories..."
    
    mkdir -p logs/nginx
    mkdir -p nginx/ssl
    
    info "‚úÖ Directories created"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_old_containers() {
    log "Stopping old containers..."
    
    docker-compose down --remove-orphans || true
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    docker system prune -f || true
    
    info "‚úÖ Old containers stopped"
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
build_and_deploy() {
    log "Building and deploying application..."
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose up -d
    
    info "‚úÖ Application deployed"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
health_check() {
    log "Performing health check..."
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if ! docker-compose ps | grep "Up" > /dev/null; then
        error "Some containers are not running properly"
        docker-compose logs
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3001/api/lessons/structure > /dev/null 2>&1; then
            log "‚úÖ Application is healthy and responding"
            return 0
        fi
        
        info "Attempt $attempt/$max_attempts - waiting for application..."
        sleep 5
        ((attempt++))
    done
    
    error "Health check failed - application is not responding"
    docker-compose logs trading-app
    exit 1
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–ª–æ–µ
show_deployment_info() {
    log "Deployment completed successfully! üéâ"
    
    echo ""
    echo "üìä Container Status:"
    docker-compose ps
    
    echo ""
    echo "üåê Access URLs:"
    echo "   ‚Ä¢ Application: http://localhost"
    echo "   ‚Ä¢ Direct API:  http://localhost:3001"
    
    echo ""
    echo "üìã Useful Commands:"
    echo "   ‚Ä¢ View logs:     docker-compose logs -f"
    echo "   ‚Ä¢ Restart:       docker-compose restart"
    echo "   ‚Ä¢ Stop:          docker-compose down"
    echo "   ‚Ä¢ Update:        ./deploy.sh"
    
    echo ""
    echo "üîß SSL Setup (optional):"
    echo "   1. Get SSL certificate (Let's Encrypt recommended)"
    echo "   2. Place cert.pem and key.pem in nginx/ssl/"
    echo "   3. Uncomment HTTPS section in nginx/nginx.conf"
    echo "   4. Restart: docker-compose restart nginx"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    info "üéØ H.E.A.R.T Trading Academy Deployment"
    info "========================================"
    
    check_requirements
    setup_directories
    stop_old_containers
    build_and_deploy
    health_check
    show_deployment_info
    
    log "üöÄ Deployment completed successfully!"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"