services:

  # Основное приложение
  trading-app:
    build: .
    container_name: trading-info-app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHANNEL_ID=${TELEGRAM_CHANNEL_ID}
      - DEVELOPMENT_MODE=${DEVELOPMENT_MODE:-false}
      - DOMAIN=${DOMAIN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-trading_info}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
    env_file:
      - .env
    volumes:
      # Монтируем уроки для возможности обновления без пересборки
      - ./lessons:/app/lessons:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/lessons/structure', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    network_mode: host

  # Nginx reverse proxy (optional, comment out if not needed)
  nginx:
    image: nginx:alpine
    container_name: trading-info-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # Логи nginx
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - trading-app
    restart: unless-stopped
    profiles:
      - nginx

  # Watchtower для автообновления (опционально)
  watchtower:
    image: containrrr/watchtower
    container_name: trading-info-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=300
      - WATCHTOWER_CLEANUP=true
    restart: unless-stopped
    profiles:
      - autoupdate